/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Api3PoolInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(uint256,address)": FunctionFragment;
    "claimLocks(uint256)": FunctionFragment;
    "currentApr()": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositAndStake(address,uint256,address)": FunctionFragment;
    "depositWithVesting(address,uint256,address,uint256,uint256)": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "lastUpdateBlock()": FunctionFragment;
    "makeClaim(uint256)": FunctionFragment;
    "maxApr()": FunctionFragment;
    "minApr()": FunctionFragment;
    "payOutClaim(uint256,uint256)": FunctionFragment;
    "releaseClaim(uint256,uint256)": FunctionFragment;
    "rewardEpochLength()": FunctionFragment;
    "rewardVestingPeriod()": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
    "scheduleUnstake(uint256)": FunctionFragment;
    "setMaxApr(uint256)": FunctionFragment;
    "setMinApr(uint256)": FunctionFragment;
    "setStakeTarget(uint256)": FunctionFragment;
    "setUpdateCoeff(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeTarget()": FunctionFragment;
    "totalDeposits()": FunctionFragment;
    "totalDepositsAt(uint256)": FunctionFragment;
    "totalShares(uint256)": FunctionFragment;
    "totalStaked(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "unstake()": FunctionFragment;
    "unstakeAndWithdraw(address,uint256)": FunctionFragment;
    "unstakeWaitPeriod()": FunctionFragment;
    "updateCoeff()": FunctionFragment;
    "updateTimelockStatus(address,address)": FunctionFragment;
    "updateUserLock(address,uint256)": FunctionFragment;
    "userToDepositorToTimelock(address,address)": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentApr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithVesting",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxApr", values?: undefined): string;
  encodeFunctionData(functionFragment: "minApr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payOutClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxApr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinApr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateCoeff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeAndWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeWaitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimelockStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserLock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToDepositorToTimelock",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payOutClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeWaitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimelockStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToDepositorToTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "newMaxApr(uint256,uint256)": EventFragment;
    "newMinApr(uint256,uint256)": EventFragment;
    "newStakeTarget(uint256,uint256)": EventFragment;
    "newUpdateCoeff(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "newMaxApr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newMinApr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newStakeTarget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newUpdateCoeff"): EventFragment;
}

export class Api3Pool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Api3PoolInterface;

  functions: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "claimLocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    currentApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWithVesting(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWithVesting(address,uint256,address,uint256,uint256)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeClaim(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeClaim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    payOutClaim(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payOutClaim(uint256,uint256)"(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    releaseClaim(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "releaseClaim(uint256,uint256)"(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardEpochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paid: boolean;
        amount: BigNumber;
        atBlock: BigNumber;
      }
    >;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paid: boolean;
        amount: BigNumber;
        atBlock: BigNumber;
      }
    >;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxApr(
      _maxApr: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxApr(uint256)"(
      _maxApr: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinApr(
      _minApr: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinApr(uint256)"(
      _minApr: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStakeTarget(uint256)"(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUpdateCoeff(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUpdateCoeff(uint256)"(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalDeposits()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositsAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDepositsAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(overrides?: Overrides): Promise<ContractTransaction>;

    "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstakeAndWithdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeAndWithdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCoeff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTimelockStatus(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTimelockStatus(address,address)"(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUserLock(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUserLock(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userToDepositorToTimelock(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "userToDepositorToTimelock(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        unstakeScheduledAt: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateBlock: BigNumber;
        lastUpdateEpoch: BigNumber;
        lastUpdateClaimIndex: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        unstakeScheduledAt: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateBlock: BigNumber;
        lastUpdateEpoch: BigNumber;
        lastUpdateClaimIndex: BigNumber;
      }
    >;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(uint256,address)"(
    fromBlock: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimLocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  "claimLocks(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  currentApr(overrides?: CallOverrides): Promise<BigNumber>;

  "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address)"(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositAndStake(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositAndStake(address,uint256,address)"(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWithVesting(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    releaseStart: BigNumberish,
    releaseEnd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWithVesting(address,uint256,address,uint256,uint256)"(
    source: string,
    amount: BigNumberish,
    userAddress: string,
    releaseStart: BigNumberish,
    releaseEnd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  makeClaim(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeClaim(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxApr(overrides?: CallOverrides): Promise<BigNumber>;

  "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  minApr(overrides?: CallOverrides): Promise<BigNumber>;

  "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  payOutClaim(
    payoutAmount: BigNumberish,
    claimReferenceBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payOutClaim(uint256,uint256)"(
    payoutAmount: BigNumberish,
    claimReferenceBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  releaseClaim(
    amount: BigNumberish,
    claimReferenceBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "releaseClaim(uint256,uint256)"(
    amount: BigNumberish,
    claimReferenceBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paid: boolean;
      amount: BigNumber;
      atBlock: BigNumber;
    }
  >;

  "rewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paid: boolean;
      amount: BigNumber;
      atBlock: BigNumber;
    }
  >;

  scheduleUnstake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "scheduleUnstake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxApr(
    _maxApr: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxApr(uint256)"(
    _maxApr: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinApr(
    _minApr: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinApr(uint256)"(
    _minApr: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStakeTarget(
    _stakeTarget: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStakeTarget(uint256)"(
    _stakeTarget: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUpdateCoeff(
    _updateCoeff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUpdateCoeff(uint256)"(
    _updateCoeff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositsAt(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDepositsAt(uint256)"(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShares(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  "totalShares(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  totalStaked(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  "totalStaked(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    fromBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(overrides?: Overrides): Promise<ContractTransaction>;

  "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstakeAndWithdraw(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeAndWithdraw(address,uint256)"(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateTimelockStatus(
    userAddress: string,
    timelockContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTimelockStatus(address,address)"(
    userAddress: string,
    timelockContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUserLock(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUserLock(address,uint256)"(
    userAddress: string,
    targetEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userToDepositorToTimelock(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  "userToDepositorToTimelock(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      locked: BigNumber;
      unstakeScheduledAt: BigNumber;
      unstakeAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      lastUpdateEpoch: BigNumber;
      lastUpdateClaimIndex: BigNumber;
    }
  >;

  "users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      locked: BigNumber;
      unstakeScheduledAt: BigNumber;
      unstakeAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      lastUpdateEpoch: BigNumber;
      lastUpdateClaimIndex: BigNumber;
    }
  >;

  withdraw(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "claimLocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    currentApr(overrides?: CallOverrides): Promise<BigNumber>;

    "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithVesting(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithVesting(address,uint256,address,uint256,uint256)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    makeClaim(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "makeClaim(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOutClaim(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payOutClaim(uint256,uint256)"(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseClaim(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "releaseClaim(uint256,uint256)"(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paid: boolean;
        amount: BigNumber;
        atBlock: BigNumber;
      }
    >;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paid: boolean;
        amount: BigNumber;
        atBlock: BigNumber;
      }
    >;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxApr(_maxApr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMaxApr(uint256)"(
      _maxApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinApr(_minApr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMinApr(uint256)"(
      _minApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakeTarget(uint256)"(
      _stakeTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateCoeff(
      _updateCoeff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpdateCoeff(uint256)"(
      _updateCoeff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDepositsAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; value: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(overrides?: CallOverrides): Promise<void>;

    "unstake()"(overrides?: CallOverrides): Promise<void>;

    unstakeAndWithdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeAndWithdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateTimelockStatus(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTimelockStatus(address,address)"(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserLock(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUserLock(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userToDepositorToTimelock(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    "userToDepositorToTimelock(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        unstakeScheduledAt: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateBlock: BigNumber;
        lastUpdateEpoch: BigNumber;
        lastUpdateClaimIndex: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        locked: BigNumber;
        unstakeScheduledAt: BigNumber;
        unstakeAmount: BigNumber;
        lastUpdateBlock: BigNumber;
        lastUpdateEpoch: BigNumber;
        lastUpdateClaimIndex: BigNumber;
      }
    >;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    newMaxApr(oldMaxApr: null, newMaxApr: null): EventFilter;

    newMinApr(oldMinApr: null, newMinApr: null): EventFilter;

    newStakeTarget(oldStakeTarget: null, newStakeTarget: null): EventFilter;

    newUpdateCoeff(oldUpdateCoeff: null, newUpdateCoeff: null): EventFilter;
  };

  estimateGas: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimLocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentApr(overrides?: CallOverrides): Promise<BigNumber>;

    "currentApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWithVesting(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWithVesting(address,uint256,address,uint256,uint256)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    makeClaim(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "makeClaim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    "maxApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    "minApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOutClaim(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payOutClaim(uint256,uint256)"(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    releaseClaim(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "releaseClaim(uint256,uint256)"(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEpochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardVestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardVestingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxApr(_maxApr: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMaxApr(uint256)"(
      _maxApr: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinApr(_minApr: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMinApr(uint256)"(
      _minApr: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStakeTarget(uint256)"(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUpdateCoeff(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUpdateCoeff(uint256)"(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDepositsAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(overrides?: Overrides): Promise<BigNumber>;

    "unstake()"(overrides?: Overrides): Promise<BigNumber>;

    unstakeAndWithdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeAndWithdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unstakeWaitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateTimelockStatus(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTimelockStatus(address,address)"(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUserLock(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUserLock(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userToDepositorToTimelock(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userToDepositorToTimelock(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(uint256,address)"(
      fromBlock: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimLocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimLocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositAndStake(address,uint256,address)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWithVesting(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWithVesting(address,uint256,address,uint256,uint256)"(
      source: string,
      amount: BigNumberish,
      userAddress: string,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeClaim(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeClaim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payOutClaim(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payOutClaim(uint256,uint256)"(
      payoutAmount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    releaseClaim(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "releaseClaim(uint256,uint256)"(
      amount: BigNumberish,
      claimReferenceBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardEpochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardEpochLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardVestingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardVestingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scheduleUnstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "scheduleUnstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxApr(
      _maxApr: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxApr(uint256)"(
      _maxApr: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinApr(
      _minApr: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinApr(uint256)"(
      _minApr: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStakeTarget(uint256)"(
      _stakeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUpdateCoeff(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUpdateCoeff(uint256)"(
      _updateCoeff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalDeposits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositsAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDepositsAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalShares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStaked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unstake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstakeAndWithdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeAndWithdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unstakeWaitPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updateCoeff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTimelockStatus(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTimelockStatus(address,address)"(
      userAddress: string,
      timelockContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUserLock(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUserLock(address,uint256)"(
      userAddress: string,
      targetEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userToDepositorToTimelock(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userToDepositorToTimelock(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
